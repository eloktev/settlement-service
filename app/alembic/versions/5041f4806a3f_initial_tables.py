"""Initial tables

Revision ID: 5041f4806a3f
Revises: 
Create Date: 2024-08-22 22:34:46.647484

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2


# revision identifiers, used by Alembic.
revision: str = '5041f4806a3f'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('living_building',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('city_db_house_id', sa.Integer(), nullable=True),
    sa.Column('parent_territory_id', sa.Integer(), nullable=True),
    sa.Column('center', geoalchemy2.types.Geometry(geometry_type='POINT', from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('city_db_house_id')
    )
    # op.create_index('idx_living_building_center', 'living_building', ['center'], unique=False, postgresql_using='gist')
    op.create_table('living_building_population',
    sa.Column('living_building_id', sa.Integer(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('forecast_type', sa.String(), nullable=False),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['living_building_id'], ['living_building.id'], ),
    sa.PrimaryKeyConstraint('living_building_id', 'year', 'forecast_type'),
    sa.UniqueConstraint('living_building_id', 'year', 'forecast_type', name='_building_year_type_uc'),
    postgresql_partition_by='RANGE (year, forecast_type)'
    )
    op.create_index(op.f('ix_living_building_population_forecast_type'), 'living_building_population', ['forecast_type'], unique=False)
    op.create_index(op.f('ix_living_building_population_living_building_id'), 'living_building_population', ['living_building_id'], unique=False)
    op.create_index(op.f('ix_living_building_population_year'), 'living_building_population', ['year'], unique=False)
    op.create_table('living_building_population_distribution',
    sa.Column('living_building_id', sa.Integer(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('forecast_type', sa.String(), nullable=False),
    sa.Column('gender', sa.Enum('male', 'female', name='gender'), nullable=False),
    sa.Column('age', sa.String(), nullable=False),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['living_building_id'], ['living_building.id'], ),
    sa.PrimaryKeyConstraint('living_building_id', 'age', 'gender', 'year', 'forecast_type'),
    sa.UniqueConstraint('living_building_id', 'year', 'forecast_type', 'gender', 'age', name='_building_year_type_gender_age_uc'),
    postgresql_partition_by='RANGE (year, forecast_type)'
    )
    op.create_index(op.f('ix_living_building_population_distribution_age'), 'living_building_population_distribution', ['age'], unique=False)
    op.create_index(op.f('ix_living_building_population_distribution_forecast_type'), 'living_building_population_distribution', ['forecast_type'], unique=False)
    op.create_index(op.f('ix_living_building_population_distribution_gender'), 'living_building_population_distribution', ['gender'], unique=False)
    op.create_index(op.f('ix_living_building_population_distribution_living_building_id'), 'living_building_population_distribution', ['living_building_id'], unique=False)
    op.create_index(op.f('ix_living_building_population_distribution_year'), 'living_building_population_distribution', ['year'], unique=False)
    # op.drop_table('spatial_ref_sys')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # op.create_table('spatial_ref_sys',
    # sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    # sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    # sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    # sa.CheckConstraint('srid > 0 AND srid <= 998999', name='spatial_ref_sys_srid_check'),
    # sa.PrimaryKeyConstraint('srid', name='spatial_ref_sys_pkey')
    # )
    op.drop_index(op.f('ix_living_building_population_distribution_year'), table_name='living_building_population_distribution')
    op.drop_index(op.f('ix_living_building_population_distribution_living_building_id'), table_name='living_building_population_distribution')
    op.drop_index(op.f('ix_living_building_population_distribution_gender'), table_name='living_building_population_distribution')
    op.drop_index(op.f('ix_living_building_population_distribution_forecast_type'), table_name='living_building_population_distribution')
    op.drop_index(op.f('ix_living_building_population_distribution_age'), table_name='living_building_population_distribution')
    op.drop_table('living_building_population_distribution')
    op.drop_index(op.f('ix_living_building_population_year'), table_name='living_building_population')
    op.drop_index(op.f('ix_living_building_population_living_building_id'), table_name='living_building_population')
    op.drop_index(op.f('ix_living_building_population_forecast_type'), table_name='living_building_population')
    op.drop_table('living_building_population')
    op.drop_index('idx_living_building_center', table_name='living_building', postgresql_using='gist')
    op.drop_table('living_building')
    # ### end Alembic commands ###
